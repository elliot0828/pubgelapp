import React, { useEffect, useState, useMemo } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  Image,
  Dimensions,
  Linking,
  SafeAreaView,
  TouchableOpacity,
} from "react-native";
import { useNavigation } from "@react-navigation/native";
import { Calendar } from "react-native-calendars";
import { collection, getDocs, limit, orderBy, query } from "firebase/firestore";
import initFirebase from "../firebase"; // Í≤ΩÎ°úÎäî ÌååÏùº Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÏàòÏ†ï
const { app, auth, db } = initFirebase();
import moment from "moment";
import { useFonts } from "expo-font";
import { ScrollView } from "react-native-gesture-handler";
const { width, height } = Dimensions.get("window");
const Tournaments = () => {
  const navigation = useNavigation(); // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌõÖ ÏÇ¨Ïö©
  const [fontsLoaded] = useFonts({
    "PUBGBattlegrounds-Textured": require("../../assets/fonts/PUBGBattlegrounds-Textured.ttf"),
    "WinnerSans-CompBold": require("../../assets/fonts/WinnerSans-CompBold.otf"),
    "AgencyFB-Bold": require("../../assets/fonts/AgencyFB-Bold.ttf"),
    "Pretendard-Regular": require("../../assets/fonts/Pretendard-Regular.otf"),
    "Pretendard-Bold": require("../../assets/fonts/Pretendard-Bold.otf"),
    BrigendsExpanded: require("../../assets/fonts/BrigendsExpanded.otf"),
  });

  const [markedDates, setMarkedDates] = useState({});
  const [tournamentsData, setTournaments] = useState([]);
  const [selectedDate, setSelectedDate] = useState(
    new Date().toISOString().split("T")[0]
  );
  const [selectedTournaments, setSelectedTournaments] = useState([]);

  // üî• ÏùºÏ†ï Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Î©¥ÏÑú markedDates ÏÉùÏÑ±
  useEffect(() => {
    const fetchTournaments = async () => {
      try {
        const scheduleQuery = await getDocs(collection(db, "schedule"));
        if (scheduleQuery.empty) {
          console.log("ÌÜ†ÎÑàÎ®ºÌä∏ ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§");
        } else {
          const scheduleData = [];
          const newMarkedDates = {};

          scheduleQuery.forEach((doc) => {
            let matchDate = doc.data().startAt.slice(0, 10);
            scheduleData.push({
              id: doc.data().matchScheduleId,
              matchDate: matchDate,
              ...doc.data(),
            });

            // Í∏∞Ï°¥ markedDates Ïú†ÏßÄÌïòÎ©¥ÏÑú ÏùºÏ†ï ÎÇ†Ïßú Ï∂îÍ∞Ä
            newMarkedDates[matchDate] = {
              marked: true,
              dotColor: "rgb(241,249,88)",
            };
          });

          setTournaments(scheduleData);

          // ÏÑ†ÌÉùÌïú ÎÇ†Ïßú Í∞ïÏ°∞ (Ï≤òÏùåÏóêÎäî Ïò§Îäò ÎÇ†Ïßú)
          setMarkedDates({
            ...newMarkedDates,
            [selectedDate]: {
              ...newMarkedDates[selectedDate], // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ïú†ÏßÄ
              selected: true,
              selectedColor: "rgba(241,249,88,1)",
              selectedTextColor: "black",
            },
          });

          // Ïò§Îäò ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
          setSelectedTournaments(
            scheduleData.filter((t) => t.matchDate === selectedDate)
          );
        }
      } catch (error) {
        console.error("Error fetching tournaments:", error);
      }
    };

    fetchTournaments();
  }, []);

  // üîÑ ÎÇ†Ïßú ÏÑ†ÌÉù Ïãú markedDates ÏóÖÎç∞Ïù¥Ìä∏
  const handleDayPress = (day) => {
    const newSelectedDate = day.dateString;

    // ÏÑ†ÌÉùÎêú ÎÇ†ÏßúÏùò ÌÜ†ÎÑàÎ®ºÌä∏ Îç∞Ïù¥ÌÑ∞ ÌïÑÌÑ∞ÎßÅ
    const filteredTournaments = tournamentsData.filter(
      (tournament) => tournament.matchDate === newSelectedDate
    );
    setSelectedTournaments(filteredTournaments);
    setSelectedDate(newSelectedDate);

    // Í∏∞Ï°¥ markedDates Ïú†ÏßÄ + ÏÉà ÏÑ†ÌÉùÎêú ÎÇ†Ïßú Í∞ïÏ°∞
    setMarkedDates((prevMarkedDates) => {
      const updatedMarkedDates = { ...prevMarkedDates };

      // Í∏∞Ï°¥ selected Ï†úÍ±∞
      Object.keys(updatedMarkedDates).forEach((date) => {
        if (updatedMarkedDates[date].selected) {
          delete updatedMarkedDates[date].selected;
          delete updatedMarkedDates[date].selectedColor;
          delete updatedMarkedDates[date].selectedTextColor;
        }
      });

      // ÏÉàÎ°úÏö¥ selectedDate Î∞òÏòÅ
      updatedMarkedDates[newSelectedDate] = {
        ...updatedMarkedDates[newSelectedDate], // Í∏∞Ï°¥ dotColor Ïú†ÏßÄ
        selected: true,
        selectedColor: "rgba(241,249,88,1)",
        selectedTextColor: "black",
      };

      return updatedMarkedDates;
    });
  };

  const renderTournamentItem = ({ item }) => (
    <TouchableOpacity
      onPress={() =>
        navigation.navigate("TournamentDetail", {
          id: item.id,
          data: item,
        })
      }
      style={styles.tournamentItem}
    >
      {item.liveOutLink !== null ? (
        <View
          style={{
            flexDirection: "row",
            flexWrap: "wrap",
            alignItems: "center",
            justifyContent: "space-between",
          }}
        >
          <Image
            source={{ uri: item.tournamentLogoUrl }}
            style={{
              width: width * 0.1,
              height: undefined,
              aspectRatio: 1 / 1,
              marginRight: 10,
            }}
          />
          <View style={{ flex: 1 }}>
            <Text
              style={styles.tournamentTitle2}
              numberOfLines={1}
              ellipsizeMode="tail"
            >
              {item.shortTitle} {item.title}
            </Text>
            <Text
              style={styles.tournamentDate}
              numberOfLines={1}
              ellipsizeMode="tail"
            >
              {moment(item.startAt).format("HH:mm")} -{" "}
              {moment(item.liveEndAt).format("HH:mm")}
            </Text>
          </View>
          <TouchableOpacity
            onPress={() => Linking.openURL(item.liveOutLink)}
            style={{
              backgroundColor: "rgba(241,249,88,0.9)",
              borderRadius: 5,
              marginLeft: 10,
              paddingVertical: 8,
              paddingHorizontal: 12,
              // marginTop: 10,
              maxWidth: 120, // Î≤ÑÌäºÏùò ÏµúÎåÄ ÎÑàÎπÑÎ•º Ï†úÌïú
              justifySelf: "flex-start", // Î≤ÑÌäºÏù¥ Îã§Î•∏ ÎÇ¥Ïö©Í≥º Ïûò Ï†ïÎ†¨ÎêòÎèÑÎ°ù
              justifyContent: "center", // ÏÑ∏Î°ú Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
              alignItems: "center", // ÏÑ∏Î°ú Í∞ÄÏö¥Îç∞ Ï†ïÎ†¨
            }}
          >
            <Text
              style={{
                color: "black",
                fontFamily: "Pretendard-Bold",
              }}
            >
              Î≥¥Îü¨Í∞ÄÍ∏∞
            </Text>
          </TouchableOpacity>
        </View>
      ) : (
        <View
          style={{
            flexDirection: "row",
            flexWrap: "wrap",
            alignItems: "center",
            justifyContent: "space-between",
          }}
        >
          <Image
            source={{ uri: item.tournamentLogoUrl }}
            style={{
              width: width * 0.1,
              height: undefined,
              aspectRatio: 1 / 1,
              marginRight: 10,
            }}
          />
          <View>
            <Text
              style={styles.tournamentTitle}
              numberOfLines={1}
              ellipsizeMode="tail"
            >
              {item.shortTitle} {item.title}
            </Text>
            <Text
              style={styles.tournamentDate}
              numberOfLines={1}
              ellipsizeMode="tail"
            >
              {moment(item.startAt).format("HH:mm")} -{" "}
              {moment(item.liveEndAt).format("HH:mm")}
            </Text>
          </View>
        </View>
      )}
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View>
        <Text
          style={{
            textAlign: "center",
            color: "white",
            fontFamily: "BrigendsExpanded",
            fontSize: 20,
            color: "rgb(241,249,88)",
          }}
        >
          Tournament{"\n"}Calendar
        </Text>
      </View>
      <View>
        <Calendar
          current={new Date().toISOString().split("T")[0]}
          markedDates={markedDates} // ‚úÖ ÏùºÏ†ï ÏûàÎäî ÎÇ†Ïßú + ÏÑ†ÌÉùÎêú ÎÇ†Ïßú Î∞òÏòÅ
          onDayPress={handleDayPress}
          theme={{
            calendarBackground: "black",
            monthTextColor: "white",
            dayTextColor: "white",
            textSectionTitleColor: "rgb(241,249,88)",
            todayTextColor: "rgb(241,249,88)",
            arrowColor: "rgb(241,249,88)",
          }}
        />

        <View style={styles.scheduleContainer}>
          {selectedTournaments.length > 0 ? (
            <FlatList
              data={selectedTournaments}
              renderItem={renderTournamentItem}
              keyExtractor={(item) => item.matchScheduleId}
              style={{ paddingBottom: 50, height: height * 0.35 }}
              contentContainerStyle={{ paddingBottom: 50 }}
              // ListFooterComponent={
              //   <View
              //     style={{ height: 150, width: width, backgroundColor: "red" }}
              //   />
              // } // Î¶¨Ïä§Ìä∏ ÎÅùÏóê Ïó¨Î∞± Ï∂îÍ∞Ä
            />
          ) : (
            <Text style={styles.noScheduleText}>
              ÏÑ†ÌÉùÌïú ÎÇ†ÏßúÏóê ÏùºÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.
            </Text>
          )}
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "black",
    paddingTop: 50,

    paddingHorizontal: 20,
  },
  scheduleContainer: {
    marginTop: 5,
    paddingTop: 10,

    paddingHorizontal: 15,
    marginBottom: 10,
  },

  tournamentTitle: {
    fontFamily: "Pretendard-Bold",
    color: "white",
    fontSize: 16,
    maxWidth: width * 0.7,
  },
  tournamentItem: {
    paddingVertical: 10,
    paddingHorizontal: 15,
    backgroundColor: "#1A1A1A",
    borderRadius: 10,
    marginBottom: 15,
    borderTopColor: "rgb(241,249,88)",
    borderTopWidth: 2,
    alignItems: "center",
    flexDirection: "row",
    flexWrap: "wrap", // ÌÖçÏä§Ìä∏ÏôÄ Î≤ÑÌäºÏù¥ Í≤πÏπòÏßÄ ÏïäÍ≤å Ìï®
  },
  tournamentTitle2: {
    fontFamily: "Pretendard-Bold",
    color: "white",
    fontSize: 16,
    flexShrink: 1, // ÌÖçÏä§Ìä∏Í∞Ä Í≥µÍ∞ÑÏùÑ Ï¥àÍ≥ºÌï† Í≤ΩÏö∞ ÏûòÎ¶¨ÎèÑÎ°ù ÏÑ§Ï†ï
  },
  tournamentDate: {
    fontFamily: "Pretendard-Regular",
    color: "#B4B4B4",
    fontSize: 14,
    flexShrink: 1, // ÌÖçÏä§Ìä∏Í∞Ä Í≥µÍ∞ÑÏùÑ Ï¥àÍ≥ºÌï† Í≤ΩÏö∞ ÏûòÎ¶¨ÎèÑÎ°ù ÏÑ§Ï†ï
  },
  // tournamentDate: {
  //   fontFamily: "Pretendard-Regular",
  //   fontSize: 14,
  //   color: "lightgrey",
  // },
  noScheduleText: {
    fontSize: 16,
    color: "#777",
    textAlign: "center",
  },
  scrollContainer: {
    padding: 15,
    paddingTop: 0,
    paddingBottom: 50,
  },
});

export default Tournaments;
